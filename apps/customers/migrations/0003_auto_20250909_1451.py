# Generated by Django 5.2.5 on 2025-09-09 13:51

from django.db import migrations
from decimal import Decimal

def fix_customer_balances(apps, schema_editor):
    Customer = apps.get_model('customers', 'Customer')
    Transaction = apps.get_model('transactions', 'Transaction')
    
    for customer in Customer.objects.all():
        # Calculate Receivable Balance (Sales/Invoices) - using total_amount - amount_paid
        receivable_transactions = Transaction.objects.filter(
            customer=customer,
            transaction_type__in=['SALE']
        )
        
        receivable_balance = Decimal('0.00')
        for txn in receivable_transactions:
            balance_due = txn.total_amount - (txn.amount_paid or Decimal('0.00'))
            receivable_balance += balance_due
        
        # Calculate Payable Balance (Purchases/Bills/Expenses)
        payable_transactions = Transaction.objects.filter(
            customer=customer,
            transaction_type__in=['PURCHASE', 'EXPENSE']
        )
        
        payable_balance = Decimal('0.00')
        for txn in payable_transactions:
            balance_due = txn.total_amount - (txn.amount_paid or Decimal('0.00'))
            payable_balance += balance_due
        
        # Update the customer (but only if the fields exist)
        if hasattr(customer, 'receivable_balance'):
            customer.receivable_balance = receivable_balance
        if hasattr(customer, 'payable_balance'):
            customer.payable_balance = payable_balance
        
        customer.save()

def reverse_fix_customer_balances(apps, schema_editor):
    # Reset balances to zero
    Customer = apps.get_model('customers', 'Customer')
    for customer in Customer.objects.all():
        if hasattr(customer, 'receivable_balance'):
            customer.receivable_balance = Decimal('0.00')
        if hasattr(customer, 'payable_balance'):
            customer.payable_balance = Decimal('0.00')
        customer.save()

class Migration(migrations.Migration):

    dependencies = [
        ('customers', '0002_auto_20250908_1806'),
        ('transactions', '0001_initial'),  # Make sure transactions exist
    ]

    operations = [
        migrations.RunPython(fix_customer_balances, reverse_fix_customer_balances),
    ]
