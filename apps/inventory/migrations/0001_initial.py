# Generated by Django 5.2.5 on 2025-08-30 01:56

import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the product or service.', max_length=255)),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit - a unique code for this item.', max_length=100)),
                ('item_type', models.CharField(choices=[('product', 'Product'), ('service', 'Service')], default='product', max_length=10)),
                ('description', models.TextField(blank=True)),
                ('unit_of_measurement', models.CharField(choices=[('Nos', 'Nos (Numbers)'), ('kg', 'Kilogram'), ('g', 'Gram'), ('litre', 'Litre'), ('m', 'Meter'), ('sqm', 'Square Meter'), ('m3', 'Cubic Meter'), ('ton', 'Tonne'), ('bag', 'Bag'), ('box', 'Box'), ('roll', 'Roll'), ('set', 'Set')], default='Nos', max_length=10)),
                ('purchase_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='The cost to purchase one unit of this item (Cost of Goods Sold).', max_digits=12)),
                ('sale_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='The price at which one unit of this item is sold.', max_digits=12)),
                ('quantity_on_hand', models.DecimalField(decimal_places=2, default=Decimal('0.00'), editable=False, help_text="Current quantity in stock. For 'Product' type items only.", max_digits=12)),
                ('reorder_level', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='The stock level at which a reorder should be triggered.', max_digits=12)),
                ('asset_account', models.ForeignKey(blank=True, help_text="The inventory asset account for this item (e.g., 'Inventory Asset').", limit_choices_to={'account_type__name': 'Current Asset'}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='asset_items', to='accounts.account')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to='core.company')),
                ('expense_account', models.ForeignKey(blank=True, help_text="Account to debit when this item is purchased (e.g., 'Cost of Goods Sold').", limit_choices_to={'account_type__name__in': ['Expense', 'Cost of Goods Sold']}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='expense_items', to='accounts.account')),
                ('income_account', models.ForeignKey(help_text="Account to credit when this item is sold (e.g., 'Sales Revenue').", limit_choices_to={'account_type__name': 'Revenue'}, on_delete=django.db.models.deletion.PROTECT, related_name='income_items', to='accounts.account')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('company', 'name'), ('company', 'sku')},
            },
        ),
        migrations.CreateModel(
            name='InventoryTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('Stock Increases', [('opening_stock', 'Opening Stock'), ('purchase', 'Purchase from Vendor'), ('sales_return', 'Sales Return from Customer'), ('adjustment_in', 'Positive Adjustment')]), ('Stock Decreases', [('sale', 'Sale to Customer'), ('purchase_return', 'Purchase Return to Vendor'), ('damaged_goods', 'Damaged or Expired Goods'), ('gift_or_promotion', 'Gift or Promotional Giveaway'), ('adjustment_out', 'Negative Adjustment'), ('expired_product', 'Expired Product')])], max_length=30)),
                ('quantity', models.DecimalField(decimal_places=2, help_text='The absolute quantity for this transaction (e.g., 10). Must be a positive number.', max_digits=12)),
                ('transaction_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True, help_text='Reason for adjustment, related document number, etc.')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_transactions', to='core.company')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='inventory.inventoryitem')),
            ],
            options={
                'ordering': ['-transaction_date', '-id'],
            },
        ),
    ]
